
fn main() {

    // 创建vector也可以通过new创建
    let mut vec = vec![1, 1, 3, 4, 5, 6];

    //访问Vec元素，通过索引，以及get返回一个Option<T>
    //两种方法：使用&和[]返回一个引用；或者使用get方法以索引作为参数来返回一个Option<&T>。
    let third: &i32 = &vec[2];
    let third: Option<&i32> = vec.get(2);    
    // vec.push(7);//又是借用出错。上面存在借用！不能增加！
    
    // 们提到 vector 只能储存相同类型的值。
    // 这是很不方便的；绝对会有需要储存一系列不同类型的值的用例。
    // 幸运的是，枚举的成员都被定义为相同的枚举类型，所以当需要在 vector 中储存不同类型值时，我们可以定义并使用一个枚举！
    // 枚举允许你通过列举可能的值来定义一个类型


}